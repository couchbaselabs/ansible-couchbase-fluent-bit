---
- name: Fail when fluent_bit variables are not defined
  ansible.builtin.fail:
    msg: "The {{ item }} property must be set"
  when: ( vars[item] is not defined )
  with_items:
    - fluent_bit_version
    - fluent_bit_storage_buffer_path
    - fluent_bit_http_listen
    - fluent_bit_http_port
    - fluent_bit_conf_dir
    - fluent_bit_conf_file
    - fluent_bit_env_file
    - fluent_bit_user
    - fluent_bit_user_group
    - fluent_bit_user_shell
    - fluent_bit_user_createhome
    - fluent_bit_log_level
    - fluent_bit_stdout_match
    - fluent_bit_mbl_couchbase_audit
    - fluent_bit_mbl_couchbase_erlang
    - fluent_bit_mbl_couchbase_eventing
    - fluent_bit_mbl_couchbase_http
    - fluent_bit_mbl_couchbase_index_projector
    - fluent_bit_mbl_couchbase_java
    - fluent_bit_mbl_couchbase_memcached
    - fluent_bit_mbl_couchbase_prometheus
    - fluent_bit_mbl_couchbase_rebalance
    - fluent_bit_mbl_couchbase_xdcr

- name: Fail when variables do not have a length
  ansible.builtin.fail:
    msg: "The {{ item }} property must be valued"
  when: ( vars[item] | string | length == 0 )
  with_items:
    - fluent_bit_storage_buffer_path
    - fluent_bit_http_listen
    - fluent_bit_http_port
    - fluent_bit_conf_dir
    - fluent_bit_conf_file
    - fluent_bit_env_file
    - fluent_bit_user
    - fluent_bit_user_group
    - fluent_bit_log_level

- name: Fail when fluent_bit_http_port is not a number
  ansible.builtin.fail:
    msg: "The fluent_bit_http_port property must be an integer"
  when: ( fluent_bit_http_port is defined and fluent_bit_http_port is not number )

- name: Fail when the log level contains an invalid value
  ansible.builtin.fail:
    msg: "The fluent_bit_log_level can only be: debug, info, warn, error"
  when: ( fluent_bit_log_level not in ['off', 'debug','info','warn','error'] )

- name: Make sure output enable flags are defined
  ansible.builtin.fail:
    msg: "The {{ item }} property must be set"
  when: ( vars[item] is not defined )
  with_items:
    - fluent_bit_loki_enabled
    - fluent_bit_splunk_enabled

- name: Fail when out enable flags are not a boolean
  ansible.builtin.fail:
    msg: "The {{ item }} property must be a boolean true or false "
  when: ( vars[item] | bool | string | lower ) not in ['true', 'false']
  with_items:
    - fluent_bit_cbhealthagent_enabled
    - fluent_bit_loki_enabled
    - fluent_bit_splunk_enabled
    - fluent_bit_es_enabled
    - fluent_bit_calyptia_enabled

# cbhealthagent preflight checks
- include_tasks:
    file: preflight/cbhealthagent.yml
  when: fluent_bit_cbhealthagent_enabled

# Loki preflight checks
- include_tasks:
    file: preflight/loki.yml
  when: fluent_bit_loki_enabled

# Splunk preflight checks
- include_tasks:
    file: preflight/splunk.yml
  when: fluent_bit_splunk_enabled

# Elasticsearch preflight checks
- include_tasks:
    file: preflight/elasticsearch.yml
  when: fluent_bit_es_enabled

- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: Get systemd version    # noqa command-instead-of-module
  ansible.builtin.command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version

- name: Set systemd version fact
  ansible.builtin.set_fact:
    fluent_bit_systemd_version: "{{ __systemd_version.stdout_lines[0] | regex_replace('^systemd\\s(\\d+).*$', '\\1') }}"

- name: Default to non-local install
  ansible.builtin.set_fact:
    __fluent_bit_local_install: false

- name: Fail when fluent_bit_local_binary_path is defined but the file doesn't exist
  block:
    - name: Check if fluent_bit_local_binary_path exists
      ansible.builtin.stat:
        path: "{{ _fluent_bit_binary_install_dir }}/fluent-bit"
      register: __fluent_bit_local_binary_check
      become: false
      delegate_to: localhost
      check_mode: false

    - name: Fail when the fluent_bit_local_binary_path does not exist
      ansible.builtin.fail:
        msg: "The fluent_bit_local_binary_path ({{ fluent_bit_local_binary_path }}) was specified but does not exist"
      when: not __fluent_bit_local_binary_check.stat.exists

    - name: Default to non-local install
      ansible.builtin.set_fact:
        __fluent_bit_local_install: true
  when: fluent_bit_local_binary_path is defined and fluent_bit_local_binary_path | length > 0

- name: Check if fluent_bit is installed
  ansible.builtin.stat:
    path: "{{ _fluent_bit_binary_install_dir }}/fluent-bit"
  register: __fluent_bit_is_installed
  check_mode: false

- name: fluent-bit Exists
  ansible.builtin.debug:
    var: __fluent_bit_is_installed.stat.exists

- name: Install Checks    # noqa var-spacing
  block:
    - name: Gather currently installed fluent-bit version
      ansible.builtin.command:
        cmd: |
          {{ _fluent_bit_binary_install_dir }}/fluent-bit --version | cut -d 'v' -f 2 | sed -Ez 's/\\n+.+$//'
      changed_when: false
      register: __fluent_bit_current_version_output
      check_mode: false

    - name: Set fluent-bit Installed Version    # noqa var-spacing
      ansible.builtin.set_fact:
        fluent_bit_installed_version: "{{ __fluent_bit_current_version_output.stdout | regex_replace( '\\n.+$|^.+v', '' ) }}"

    - name: fluent-bit Installed Version
      ansible.builtin.debug:
        var: fluent_bit_installed_version

  when: __fluent_bit_is_installed.stat.exists and not __fluent_bit_local_install

- name: Get Fluent Bit Version from Github
  block:
    - name: Get the latest published Fluent Bit     # noqa command-instead-of-module
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/{{ _fluent_bit_github_org }}/{{ _fluent_bit_github_repo }}/releases \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      changed_when: false
      register: _fluent_bit_version_request

    - name: Set the Fluent Bit Version
      ansible.builtin.set_fact:
        fluent_bit_version: "{{ _fluent_bit_version_request.stdout | string | regex_replace('^.*v', '') }}"
  when: fluent_bit_version == 'latest' and not __fluent_bit_local_install

# Couchbase preflight checks
- include_tasks:
    file: preflight/couchbase.yml

- name: Set whether or not to do the install
  ansible.builtin.set_fact:
    __fluent_bit_do_install: "{{  not __fluent_bit_is_installed.stat.exists or fluent_bit_installed_version is version(fluent_bit_version, '<', version_type='semver') }}"

- name: Do Install
  ansible.builtin.debug:
    var: __fluent_bit_do_install
